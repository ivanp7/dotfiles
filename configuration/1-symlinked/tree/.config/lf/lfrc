# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set color256
set drawbox on
set tabstop 4

map zp set preview!
map z1 :set nopreview; set ratios 1
map z2 set ratios 1:2
map z3 set ratios 1:2:3
map z4 set ratios 1:2:3:5
map z5 set ratios 1:2:3:5:8

# cmd recol %{{
#     w=$(tput cols)
#     if [ $w -le 80 ]; then
#         lf -remote "send $id set ratios 1:2"
#     elif [ $w -le 160 ]; then
#         lf -remote "send $id set ratios 1:2:3"
#     else
#         lf -remote "send $id set ratios 1:2:3:5"
#     fi
# }}

# use enter for shell commands
# map <enter> shell

# execute current file (must be executable)
map x !$f
map X &$f

# create directory
cmd mkdir %mkdir "$(echo "$@")"
map [ push ::mkdir<space>

# create file
cmd touch %touch "$(echo "$@")"
map ] push ::touch<space>

# edit files
map e $$EDITOR $fx

# read link
map al %readlink $f

# display owner & group
map ao %stat -c %U:%G $f

# copy path
map Ypx $echo -n "$f" | xclip -i -selection clipboard
map Ydx $echo -n "$(dirname $f)" | xclip -i -selection clipboard
map Ynx $echo -n "$(basename $f)" | xclip -i -selection clipboard
map Ypt $tmux set-buffer -- "$f"
map Ydt $tmux set-buffer -- "$(dirname $f)"
map Ynt $tmux set-buffer -- "$(basename $f)"

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
            mntdir="$f-archivemount"
            [ ! -d "$mntdir" ] && {
                mkdir -p "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            }
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        *)
            case $(file --mime-type $f -b) in
                text/*) $EDITOR $fx;;
                image/*) feh $fx &;;
                application/pdf) zathura $fx &;;
                *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
            esac
    esac
}}

# glob select&unselect
map V push ::glob-select<space>
map U push ::glob-unselect<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

cmd bulk_rename !{{
    original_names_file=$(mktemp)
    changed_names_file=$(mktemp)
    for file in $fs
    do 
        echo "$file" >> $original_names_file
        echo "$file" >> $changed_names_file
    done
    $EDITOR $changed_names_file

    NAME_FIX='s/\\/\\\\/g; s/ /\\ /g; s/\$/\\\$/g'
    sed -i "$NAME_FIX" $original_names_file
    sed -i "$NAME_FIX" $changed_names_file

    if [ "$(cat $original_names_file | wc -l)" -ne "$(cat $changed_names_file | wc -l)" ]
    then
        echo "Error: number of lines is not equal to the number of files."
    else
        commands_file=$(mktemp)
        paste -d" " $original_names_file $changed_names_file > $commands_file
        rm $original_names_file $changed_names_file
        sed -i 's/^/mv -vi -- /' $commands_file
        $EDITOR $commands_file

        for cmd in $(cat $commands_file)
        do $SHELL -c "$cmd"
        done
        rm $commands_file
    fi
}}

cmd smart_rename ${{
    if [ -z "$fs" ]
    then lf -remote "send $id rename"
    else lf -remote "send $id bulk_rename"
    fi
}}

map r smart_rename
map R $vidir $fs

# pasting done right
# cmd paste !{{
#     send="while read -r line; do lf -remote \"send $id echo \$line\"; done && lf -remote 'send reload'"
#     load=$(lf -remote 'load')
#     mode=$(echo "$load" | sed -n '1p')
#     list=$(echo "$load" | sed '1d')
#     s='' && [ ! -w . ] && s='sudo'
#     case "$mode" in
#         copy) cmd='cp-p';; move) cmd='mv-p';;
#     esac
#     cmd="$cmd --new-line"
#     for f in $list; do
#         $s sh -c "$cmd --backup=numbered \"$f\" . | $send &"
#     done
#     lf -remote 'send load'
#     lf -remote 'send clear'
# }}

# move current file or selected files to trash folder
cmd trash %trash-put $fx

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <bs2> trash
map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

