# bash prompt

# source git-prompt.sh
. /usr/share/git/completion/git-prompt.sh

# prompt
function __prompt_timer_start()
{
    __prompt_timer=${__prompt_timer:-$SECONDS}
}

function __prompt_timer_stop()
{
    __prompt_timer_delta=$(($SECONDS - $__prompt_timer))
    unset __prompt_timer
}

trap 'tput sgr0; __prompt_timer_start' DEBUG

############################################################################

# ANSI color codes
RS="\[\033[0m\]"    # reset
HC="\[\033[1m\]"    # hicolor
UL="\[\033[4m\]"    # underline
INV="\[\033[7m\]"   # inverse background and foreground
FBLK="\[\033[30m\]" # foreground black
FRED="\[\033[31m\]" # foreground red
FGRN="\[\033[32m\]" # foreground green
FYEL="\[\033[33m\]" # foreground yellow
FBLE="\[\033[34m\]" # foreground blue
FMAG="\[\033[35m\]" # foreground magenta
FCYN="\[\033[36m\]" # foreground cyan
FWHT="\[\033[37m\]" # foreground white
BBLK="\[\033[40m\]" # background black
BRED="\[\033[41m\]" # background red
BGRN="\[\033[42m\]" # background green
BYEL="\[\033[43m\]" # background yellow
BBLE="\[\033[44m\]" # background blue
BMAG="\[\033[45m\]" # background magenta
BCYN="\[\033[46m\]" # background cyan
BWHT="\[\033[47m\]" # background white

__prompt_color()
{
    local __prompt_term=$TERM
    # tput setaf/setab doesn't work if TERM=linux
    [[ $TERM == "linux" ]] && TERM=xterm-256color

    echo -n "\[$(tput sgr0)$(tput setaf $1)$(
        if [[ -n $2 ]]
        then echo -n "$(tput setab $2)"
        fi)\]"

    TERM=__prompt_term
}

__prompt_stdcolor=$(__prompt_color 244)
__prompt_cmdcolor=$(__prompt_color 15)

__prompt_dash=$'\u2500'
__prompt_2dash=$'\u2550'
__prompt_arrow=$'\u2192'
__prompt_topcorner=$'\u250C'
__prompt_midcorner=$'\u255E'
__prompt_botcorner=$'\u2514'

__prompt_print()
{
    echo -n "$1${__prompt_stdcolor}"
}

############################################################################

__prompt_timeinfo()
{
    __prompt_print "$__prompt_dash[$(__prompt_color 15)\D{%T}${__prompt_stdcolor}]"
}

__prompt_cmdtimeinfo()
{
    __prompt_print "$__prompt_dash[$(__prompt_color 15)${__prompt_timer_delta}s${__prompt_stdcolor}]"
}

__prompt_cmdstatusinfo()
{
    if [[ $__prompt_exitcode -eq 0 ]]
    then
        __prompt_print "$__prompt_dash[$(__prompt_color 10)ok${__prompt_stdcolor}]"
    else
        __prompt_print "$__prompt_dash[$(__prompt_color 9)error ${__prompt_exitcode}${__prompt_stdcolor}]"
    fi
}

__prompt_processinfo()
{
    local OutputStr="$(sed "
        s/systemd//;
        s/---login//;
        s/---pstree//;
        s/---sh//g;
        s/---bash//g;
        s/^---//;
        s/sshd---sshd/ssh/;
        s/tmux: server/tmux/;
        s/screen---screen/screen/;
        s/y-desktop.sh---screen---yaft/yaft/;
        s/---/]${__prompt_arrow}[/g; 
    " <<< $(pstree -ls $$))"

    [[ -z $OutputStr ]] && exit

    local TimeInfoLength=11
    local CmdTimeInfoLength=$((4 + ${#__prompt_timer_delta}))
    local CmdStatusLength=$((3 + $(
        if [[ $__prompt_exitcode -ne 0 ]]
        then echo $((6 + ${#__prompt_exitcode}))
        else echo 2
        fi)
    ))

    local PromptLength=$((2 + $TimeInfoLength + $CmdTimeInfoLength + $CmdStatusLength + 2))
    local MaxOutputLength=$(($__prompt_termwidth - $PromptLength))

    local PNameColor=$(__prompt_color 15)
    local GapColor=$(__prompt_color 1)

    local SeparatorL="]$__prompt_arrow"
    local ColSeparatorL="$__prompt_stdcolor]$__prompt_arrow"
    local SeparatorR="$__prompt_arrow["
    local ColSeparatorR="$__prompt_arrow[$PNameColor"

    if [[ ${#OutputStr} -le $MaxOutputLength ]]
    then
        local HalfColoredOutputStr=${OutputStr//$SeparatorL/$ColSeparatorL}
        local ColoredOutputStr=${HalfColoredOutputStr//$SeparatorR/$ColSeparatorR}
        __prompt_print "[$PNameColor$ColoredOutputStr$__prompt_stdcolor]"
    else
        local OutputStrExcessLength=$((3 + ${#OutputStr} - $MaxOutputLength - 1))
        local OutputStrShort=${OutputStr:$OutputStrExcessLength}
        local HalfColoredOutputStrShort=${OutputStrShort//$SeparatorL/$ColSeparatorL}
        local ColoredOutputStrShort=${HalfColoredOutputStrShort//$SeparatorR/$ColSeparatorR}
        __prompt_print "$GapColor...$__prompt_stdcolor$ColoredOutputStrShort$__prompt_stdcolor]"
    fi
}

############################################################################

__prompt_username()
{
    if [[ $USER == "ivanp7" ]] && [[ $(tput colors) -ge 256 ]]
    then
        local colorI=$(__prompt_color 196)
        local colorV=$(__prompt_color 166)
        local colorA=$(__prompt_color 136)
        local colorN=$(__prompt_color 106)
        local colorP=$(__prompt_color  76)
        local color7=$(__prompt_color  46)
        __prompt_print "${colorI}i${colorV}v${colorA}a${colorN}n${colorP}p${color7}7"
        exit
    fi

    if [[ $EUID -ne 0 ]]
    then
        __prompt_print "$(__prompt_color 2)$USER"

    else
        __prompt_print "$(__prompt_color 15 1)$USER"
    fi
}

__prompt_userhostinfo()
{
    __prompt_print "$__prompt_2dash[$(__prompt_username)@$(__prompt_color 39)$HOSTNAME$__prompt_stdcolor]"
}

__prompt_gitinfo()
{
    if [[ -z $__prompt_gitbranch ]]
    then
        __prompt_print "$__prompt_2dash[$(__prompt_color 165)-$__prompt_stdcolor]"

    elif [[ -z $__prompt_gitstatus ]]
    then
        __prompt_print "$__prompt_2dash[$(__prompt_color 165)$__prompt_gitbranch$__prompt_stdcolor]"

    else
        __prompt_print "$__prompt_2dash[$(__prompt_color 16 165)$__prompt_gitbranch$__prompt_stdcolor]"
    fi
}

__prompt_pwdinfo()
{
    local UserHostInfoLength=$((4 + ${#USER} + ${#HOSTNAME}))
    local GitInfoLength=$((3 + $(
        if [[ -n $__prompt_gitbranch ]]
        then echo ${#__prompt_gitbranch}
        else echo 1
        fi)
    ))

    local PromptLength=$((1 + $UserHostInfoLength + $GitInfoLength + 3))
    local MaxOutputLength=$(($__prompt_termwidth - $PromptLength))

    local DirColor=$(__prompt_color 7)$UL
    local SlashColor=$__prompt_stdcolor
    local GapColor=$(__prompt_color 1)

    if [[ ${#PWD} -le $MaxOutputLength ]]
    then
        local ColPWD=$DirColor${PWD//\//$SlashColor\/$DirColor}
        __prompt_print "$__prompt_2dash[$ColPWD$__prompt_stdcolor]"
    else
        local PWDExcessLength=$((3 + ${#PWD} - $MaxOutputLength))
        local PWD1=${PWD:0:${#PWD}/ 2 - ($PWDExcessLength + 1) / 2}
        local ColPWD1=$DirColor${PWD1//\//$SlashColor\/$DirColor}
        local PWD2=${PWD:${#PWD} / 2 + $PWDExcessLength / 2}
        local ColPWD2=$DirColor${PWD2//\//$SlashColor\/$DirColor}

        __prompt_print "$__prompt_2dash[$ColPWD1$GapColor...$ColPWD2$__prompt_stdcolor]"
    fi
}

############################################################################

__prompt_inputmodegap="\[\e[3C\]"

__prompt_character()
{
    if [[ $EUID -ne 0 ]]
    then
        __prompt_print "$"
    else
        __prompt_print "#"
    fi
}

############################################################################

PROMPT_COMMAND=__prompt_command # Func to gen PS1 after CMDs
__prompt_command()
{
    __prompt_exitcode="$?" # This needs to be first

    __prompt_timer_stop
    __prompt_termwidth=$(tput cols)

    __prompt_gitbranch="$(__git_ps1 '%s')"
    __prompt_gitstatus=$([[ -n "$(git status --short 2> /dev/null)" ]] && echo "changed")

    ### Prompt ###

    local PromptLine1="$__prompt_stdcolor${__prompt_topcorner}$(__prompt_timeinfo)$(__prompt_cmdtimeinfo)$(__prompt_cmdstatusinfo) $(__prompt_processinfo)"
    local PromptLine2="$__prompt_stdcolor${__prompt_midcorner}$(__prompt_userhostinfo)$(__prompt_gitinfo)$(__prompt_pwdinfo)"
    local PromptLine3="$__prompt_stdcolor${__prompt_botcorner}${__prompt_dash}${__prompt_inputmodegap}${__prompt_dash}"

    PS1="$__prompt_stdcolor
$PromptLine1
$PromptLine2
$PromptLine3 $(__prompt_character) ${__prompt_cmdcolor}"

    PS2="$PromptLine3 > ${__prompt_cmdcolor}"
}

# vim: set ft=sh:

