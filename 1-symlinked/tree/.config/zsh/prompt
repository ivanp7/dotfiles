# Auxilliary constants & functions {{{

_p_colors=$(tput colors)
_p_bold="%B"
_p_stopbold="%b"

_p_color ()
{
    echo "%F{$1}$([ -n "$2" ] && echo "%K{$2}" || true)"
}

_p_safe_color ()
{
    if [ "$_p_colors" -ge 256 ]; then echo "$1"; else echo "$2"; fi
}

_p_color_white=$(_p_safe_color "$(_p_color 15)" "${_p_bold}$(_p_color 7)")%k

_p_stdcolor=$(_p_safe_color "$(_p_color 244)" "$(_p_color 7)${_p_stopbold}")%k
_p_cmdcolor=${_p_color_white}

_p_dot="·"
_p_dash="─"
_p_2dash="═"
_p_aeq="≈"
_p_rightarrow="→"
_p_top="┌"
_p_mid0="│"
_p_mid2="╞"
_p_bot="└"
_p_bullet="•"
_p_uparrow="↑"
_p_downarrow="↓"
_p_updownarrow="↕"
_p_section="§"

_p_ellipsis="${_p_dot}${_p_dot}${_p_dot}"

_p_default_prompt_text=">>>>>>>>"

# }}}
# Initialization {{{
# Shell info {{{
_p_shellinfo_f ()
{
    local Date=$(date +'%F %a')
    local Tty=$(tty | sed 's@^/dev/@@')
    local Dimensions="[${COLUMNS}x${LINES}]x$_p_colors"
    local Sep="${_p_dot}${_p_dot}${_p_dot}"
    _p_shellinfo=" $Date $Sep $Tty @ $TERM $Dimensions $Sep"
    _p_shellinfo_length=${#_p_shellinfo}
}
add-zsh-hook precmd _p_shellinfo_f
# }}}

_p_preexec ()
{
    _p_timer=${_p_timer:-$SECONDS}
    _p_command_executed=true
}
add-zsh-hook preexec _p_preexec

_p_prompt_init_f ()
{
    _p_exitcode="$?" # This needs to be first

    if [ -n "$_p_command_executed" ]
    then 
        unset _p_command_executed

        if [ -n "$_p_timer" ]
        then
            _p_timer_delta=$(($SECONDS - $_p_timer))
            [ $_p_timer_delta -lt 0 ] && _p_timer_delta=0
            unset _p_timer
        fi
    else 
        unset _p_timer_delta
        unset _p_exitcode
    fi

    if [ "$COLUMNS" -gt "$((2 * $_p_shellinfo_length))" ]
    then
        _p_separator="$(dd if=/dev/zero bs=1 count=$(($COLUMNS-$_p_shellinfo_length)) status=none | 
            sed "s/./${_p_dot}/g")${_p_shellinfo}"
    else
        _p_separator="$(dd if=/dev/zero bs=1 count=$COLUMNS status=none | sed "s/./${_p_dot}/g")"
    fi
}
add-zsh-hook precmd _p_prompt_init_f

# }}}
# First line {{{
# Last command stop time {{{

_p_timeinfo_f ()
{
    _p_timeinfo_length=10
    local TimeColor=${_p_stdcolor}
    _p_timeinfo="${_p_dash} ${TimeColor}%D{%T}${_p_stdcolor}"
}
add-zsh-hook precmd _p_timeinfo_f

# }}}
# Last command duration {{{

_p_cmdtimeinfo_f ()
{
    if [ -z "$_p_timer_delta" ]
    then 
        _p_cmdtimeinfo_length=0
        _p_cmdtimeinfo=""
        return
    fi

    if [ "$_p_timer_delta" -eq 0 ]
    then 
        _p_cmdtimeinfo_length=0
        _p_cmdtimeinfo=""
        return
    fi

    local SecondsColor=${_p_color_white}
    local MinutesColor=$(_p_safe_color "$(_p_color 220)" "${_p_bold}$(_p_color 3)")
    local HoursColor=$(_p_safe_color "$(_p_color 196)" "${_p_bold}$(_p_color 1)")
    local DaysColor=$(_p_safe_color "$(_p_color 165)" "${_p_bold}$(_p_color 5)")

    local delta_minutes="$((${_p_timer_delta} / 60))"
    local delta_hours="$((${delta_minutes} / 60))"
    local delta_days="$((${delta_hours} / 24))"

    local seconds_nocolor="$((${_p_timer_delta} % 60))s"
    local seconds="${SecondsColor}${seconds_nocolor}"
    if [ "$delta_minutes" -gt 0 ]
    then 
        local minutes_nocolor="$((${delta_minutes} % 60))m"
        local minutes="${MinutesColor}${minutes_nocolor}"
    fi
    if [ "$delta_hours" -gt 0 ]
    then 
        local hours_nocolor="$((${delta_hours} % 24))h"
        local hours="${HoursColor}${hours_nocolor}"
    fi
    if [ "$delta_days" -gt 0 ]
    then 
        local days_nocolor="${delta_days}d"
        local days="${DaysColor}${days_nocolor}"
    fi

    _p_cmdtimeinfo_length=$((2 + ${#days_nocolor} + ${#hours_nocolor} + 
    ${#minutes_nocolor} + ${#seconds_nocolor}))
    _p_cmdtimeinfo=" ${_p_aeq}${days}${hours}${minutes}${seconds}${_p_stdcolor}"
}
add-zsh-hook precmd _p_cmdtimeinfo_f

# }}}
# Last command status {{{

_p_cmdstatusinfo_f ()
{
    local SuccessColor=${_p_color_white}
    local FailureColor=$(_p_safe_color "$(_p_color 196)" "${_p_bold}$(_p_color 1)")
    if [ -n "$_p_exitcode" ]
    then
        if [ "$_p_exitcode" -eq 0 ]
        then 
            _p_cmdstatusinfo_length=3
            _p_cmdstatusinfo=" ${SuccessColor}↓0${_p_stdcolor}"
        else 
            _p_cmdstatusinfo_length=$((2 + ${#_p_exitcode}))
            _p_cmdstatusinfo=" ${FailureColor}↓${_p_exitcode}${_p_stdcolor}"
        fi
    else 
        _p_cmdstatusinfo_length=0
        _p_cmdstatusinfo=
    fi
}
add-zsh-hook precmd _p_cmdstatusinfo_f

# }}}
# Process chain {{{

_p_processinfo_f ()
{
    local bra=" "
    local ket=" "
    local OutputStr="$($HOME/.scripts/df/pstree.sh | sed 's@---@///@g')"

    if [ -z "$OutputStr" ]
    then 
        unset _p_processinfo
        return
    fi

    local PromptLength=$((1 + $_p_timeinfo_length + $_p_cmdtimeinfo_length + 
                          $_p_cmdstatusinfo_length + 3))
    local MaxOutputLength=$(($COLUMNS - $PromptLength))

    local PNameColor=${_p_color_white}
    local PrettifyingRegEx='s@///@'"${_p_stdcolor}$ket${_p_rightarrow}$bra$PNameColor"'@g'

    if [ "${#OutputStr}" -le "$MaxOutputLength" ]
    then
        local OutputStr=$(echo "$OutputStr" | sed -E "$PrettifyingRegEx")
        _p_processinfo=" ($PNameColor$OutputStr${_p_stdcolor})"
    else
        local OutputStr="$OutputStr///"
        local MaxOutputLength=$(($MaxOutputLength - ${#_p_ellipsis}))
        local SkipColor=$(_p_color 1)
        local SkipRegEx='s@^([^/]*///)(.*)@\2@'

        local OutputStrShorter=$(echo "$OutputStr" | sed -E "$SkipRegEx")
        while [ "${#OutputStr}" -gt "$MaxOutputLength" ] && [ "${#OutputStrShorter}" -lt "${#OutputStr}" ]
        do
            local OutputStr="$OutputStrShorter"
            local OutputStrShorter=$(echo "$OutputStr" | sed -E "$SkipRegEx")
        done

        if [ -n "$OutputStr" ]
        then
            local OutputStr="$SkipColor${_p_ellipsis}///${OutputStr:0:-3}"
            local OutputStr=$(echo "$OutputStr" | sed -E "$PrettifyingRegEx")
            _p_processinfo=" ($OutputStr${_p_stdcolor})"
        else
            _p_processinfo=" ($SkipColor${_p_ellipsis}${_p_stdcolor})"
        fi
    fi
}
add-zsh-hook precmd _p_processinfo_f

# }}}
# }}}
# Second line {{{
# User@host {{{

_p_userhostinfo_f ()
{
    local USER=$(whoami)
    local HOST=$(hostname)
    _p_userhostinfo_length="$((3 + ${#USER} + ${#HOST}))"

    local RootColor=$(_p_safe_color "$(_p_color 15 196)" "${_p_bold}$(_p_color 7 1)")
    local UserColor=$(_p_safe_color "$(_p_color 40)" "${_p_bold}$(_p_color 2)")
    [ "$(id -u)" -eq 0 ] && UserColor=$RootColor
    local HostColor=$(_p_safe_color "$(_p_color 39)" "${_p_bold}$(_p_color 4)")

    local _p_username="${UserColor}${USER}${_p_stdcolor}"
    local _p_hostname="${HostColor}${HOST}${_p_stdcolor}"

    if [ "$_p_colors" -ge 256 ]
    then
        local username_line="$(grep -s "^$USER " $ZDOTDIR/prompt.usernames)"
        local hostname_line="$(grep -s "^$HOST " $ZDOTDIR/prompt.hostnames)"

        [ -n "$username_line" ] && local _p_username="$(echo "$username_line" | cut -d' ' -f2)${_p_stdcolor}"
        [ -n "$hostname_line" ] && local _p_hostname="$(echo "$hostname_line" | cut -d' ' -f2)${_p_stdcolor}"
    fi

    _p_userhostinfo="  ${_p_username}@${_p_hostname}"
}
add-zsh-hook precmd _p_userhostinfo_f

# }}}
# git info {{{

_p_gitinfo_f ()
{
    local LocationColor=$(_p_safe_color "$(_p_color 228)" "${_p_bold}$(_p_color 3)")

    # Exit if not inside a Git repository
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1
    then
        _p_gitinfo_length=0
        _p_gitinfo=""
        return
    fi

    # Git branch/tag, or name-rev if on detached head
    local GIT_LOCATION=${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}
    _p_gitinfo_length=$((3 + ${#GIT_LOCATION}))

    local AheadColor=$_p_color_white
    local BehindColor=$(_p_safe_color "$(_p_color 166)" "${_p_bold}$(_p_color 1)")

    local MergingColor=$(_p_safe_color "$(_p_color 33)" "${_p_bold}$(_p_color 4)")
    local UntrackedColor=$(_p_safe_color "$(_p_color 160)" "${_p_bold}$(_p_color 1)")
    local ModifiedColor=$(_p_safe_color "$(_p_color 214)" "${_p_bold}$(_p_color 3)")
    local StagedColor=$(_p_safe_color "$(_p_color 34)" "$(_p_color 2)")

    local AHEAD="${AheadColor}${_p_uparrow}NUM${_p_stdcolor}"
    local BEHIND="${BehindColor}${_p_downarrow}NUM${_p_stdcolor}"

    local MERGING="${MergingColor}${_p_updownarrow}${_p_stdcolor}"
    local UNTRACKED="${UntrackedColor}${_p_bullet}${_p_stdcolor}"
    local MODIFIED="${ModifiedColor}${_p_bullet}${_p_stdcolor}"
    local STAGED="${StagedColor}${_p_bullet}${_p_stdcolor}"

    local -a DIVERGENCES
    local -a FLAGS

    local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_AHEAD" -gt 0 ]
    then 
        local _p_gitinfo_div=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1 + ${#NUM_AHEAD}))
        DIVERGENCES+=( "${AHEAD//NUM/$NUM_AHEAD}" )
    fi

    local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_BEHIND" -gt 0 ]
    then 
        local _p_gitinfo_div=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1 + ${#NUM_BEHIND}))
        DIVERGENCES+=( "${BEHIND//NUM/$NUM_BEHIND}" )
    fi

    [ -n "$_p_gitinfo_div" ] && _p_gitinfo_length=$(($_p_gitinfo_length + 1))

    local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
    if [ -n "$GIT_DIR" ] && [ -r "$GIT_DIR/MERGE_HEAD" ]
    then 
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$MERGING" )
    fi

    if [ -n "$(git ls-files $(git rev-parse --show-toplevel) --other --exclude-standard 2> /dev/null)" ]
    then 
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$UNTRACKED" )
    fi

    if ! git diff --quiet 2> /dev/null
    then 
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$MODIFIED" )
    fi

    if ! git diff --cached --quiet 2> /dev/null
    then 
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$STAGED" )
    fi

    [ -n "$_p_gitinfo_flag" ] && _p_gitinfo_length=$(($_p_gitinfo_length + 1))

    local -a GIT_INFO
    GIT_INFO+=( "${LocationColor}$GIT_LOCATION${_p_stdcolor}" )
    [ "${#DIVERGENCES[@]}" -ne 0 ] && GIT_INFO+=( "${(j::)DIVERGENCES}" )
    [ "${#FLAGS[@]}" -ne 0 ] && GIT_INFO+=( "${(j::)FLAGS}" )
    _p_gitinfo=" ${_p_section} ${(j: :)GIT_INFO}"
}
add-zsh-hook precmd _p_gitinfo_f

# }}}
# Current directory {{{

_p_pwdinfo_f ()
{
    local PromptLength=$((1 + $_p_userhostinfo_length + $_p_gitinfo_length + 1))
    local MaxOutputLength=$(($COLUMNS - $PromptLength))

    if [ "$(($_p_gitinfo_length * 2))" -ge "$MaxOutputLength" ]
    then
        local MaxOutputLength=$(($MaxOutputLength + $_p_gitinfo_length))
        _p_gitinfo_length=0
        unset _p_gitinfo
    fi

    local DirColor=${_p_color_white}
    local SlashColor=${_p_stdcolor}
    local DirColoringRegEx="s@/@$SlashColor/$DirColor@g"

    local SkipColor=$(_p_color 1)
    local SkipRegEx='s@/(.)([^/][^/]+)/@/\1~/@'
    local SkipColoringRegEx="s@~/@$SkipColor~$SlashColor/@"
    local SkipCounter=0

    local DirPath="$PWD/"
    local DirPathShorter=$(echo "$DirPath" | sed -E "$SkipRegEx")

    while [ "$((${#DirPath} - 1))" -gt "$MaxOutputLength" ] && [ "${#DirPathShorter}" -lt "${#DirPath}" ]
    do
        local DirPath="$DirPathShorter"
        local DirPathShorter=$(echo "$DirPath" | sed -E "$SkipRegEx")
        local SkipCounter=$(($SkipCounter + 1))
    done

    for i in $(seq 1 $SkipCounter)
    do local DirPath=$(echo "$DirPath" | sed -E "$SkipColoringRegEx")
    done

    local DirPath=${DirPath:0:-1}
    local DirPath=$(echo "$DirPath" | sed -E "$DirColoringRegEx")

    if [ "$_p_colors" -ge 256 ]
    then
        local current_color=258
        while echo "$DirPath" | grep -q "$DirColor"
        do
            local real_current_color=$current_color
            [ "$current_color" -gt 255 ] && local real_current_color=255
            [ "$current_color" -lt 240 ] && local real_current_color=240

            local DirPath=$(echo "$DirPath" | sed "s/\\(.*\\)$DirColor/\\1$(_p_color $real_current_color)/")
            local current_color=$(($current_color - 3))
        done
    fi

    _p_pwdinfo=" $DirColor$DirPath${_p_stdcolor}"
}
add-zsh-hook precmd _p_pwdinfo_f

# }}}
# }}}
# Third line {{{

_p_cmdline_f ()
{
    local PromptCharacterColor=$(_p_safe_color "$(_p_color 250)" "$(_p_color 7)")
    local PromptCharacter="${PromptCharacterColor} $([ "$(id -u)" -ne 0 ] && echo "$" || echo "#") ${_p_cmdcolor}"

    PROMPT="${_p_stdcolor}${_p_bot}${_p_dash} $2$1${_p_stdcolor}${PromptCharacter}"
    local CSI=$'\e['
    local len=$((8 + 2))
    local FixPrevPromptPrefix="%{${CSI}A${_p_mid0}$(printf "%0.s " $(seq 1 $len)) ${_p_dot}${CSI}${len}D${CSI}3D${CSI}B%}"
    PROMPT2="${_p_stdcolor}${FixPrevPromptPrefix}${_p_bot}${_p_dash} $2$1${_p_stdcolor}${PromptCharacter}"
}

_p_cursor_block ()
{
    echo -ne '\e[1 q'
}

_p_cursor_beam ()
{
    echo -ne '\e[5 q'
}

zle-keymap-select ()
{
    CommandModeIndicatorColor=$(_p_color 0 7)
    if [ "$KEYMAP" = "vicmd" ]
    then 
        _p_cmdline_f "${_p_default_prompt_text}" "${CommandModeIndicatorColor}"
        _p_cursor_block
    else 
        _p_cmdline_f "${_p_default_prompt_text}"
        _p_cursor_beam
    fi
    zle reset-prompt
}
zle -N zle-keymap-select

zle-line-init ()
{
    (( ${+terminfo[smkx]} )) && echoti smkx
    _p_cmdline_f "${_p_default_prompt_text}"
    zle reset-prompt
    _p_cursor_beam
}
zle -N zle-line-init

zle-line-finish ()
{
    (( ${+terminfo[rmkx]} )) && echoti rmkx
    if [ "$(($(echo -En "$BUFFER" | sed -E 's;(.*[^\\])(\\*)$;\2;' | wc -m) % 2))" -eq 0 ]
    then 
        local TimeColor=${_p_stdcolor}
        _p_cmdline_f "%D{%T}" "${TimeColor}"
    fi
    zle reset-prompt
    _p_cursor_block
}
zle -N zle-line-finish

# Fix a bug when you C-c in CMD mode and you'd be prompted with CMD mode indicator, while in fact you would be in INS mode
# Fixed by catching SIGINT (C-c), set vim_mode to INS and then repropagate the SIGINT, so if anything else depends on it, we will not break it
TRAPINT ()
{
    _p_cmdline_f "${_p_default_prompt_text}"
    zle && { zle reset-prompt; zle -R; }
    return $(( 128 + $1 ))
} 

# }}}
# Prompt itself {{{

_p_prompt ()
{
    print -P "${_p_stdcolor}"
    print -P "${_p_stdcolor}${_p_separator}"
    print -P "${_p_stdcolor}${_p_top}${_p_timeinfo}${_p_cmdtimeinfo}${_p_cmdstatusinfo}${_p_processinfo}"
    print -P "${_p_stdcolor}${_p_mid0}${_p_userhostinfo}${_p_pwdinfo}${_p_gitinfo}"

    _p_cmdline_f "${_p_default_prompt_text}"
}
add-zsh-hook precmd _p_prompt

# }}}

# vim: ft=zsh: foldmethod=marker:
