# auxilliary functions {{{

_color ()
{
    [ -z "$2" ] &&
        echo -en "\033[38;5;${1}m" ||
        echo -en "\033[38;5;${1}m\033[48;5;${2}m"
}

# }}}
# separator {{{

separator ()
{
    echo "$(_color 15)$(dd if=/dev/zero bs=1 count=${1:-$COLUMNS} status=none | sed "s/./·/g")${_color_reset}"
}

spectrum ()
{
    # Based on: https://gist.github.com/XVilka/8346728
    # echo $COLORTERM
    awk -v term_cols="${1:-$COLUMNS}" 'BEGIN{
        s="··";
        for (colnum = 0; colnum<term_cols; colnum++) {
            r = 255-(colnum*255/term_cols);
            g = (colnum*510/term_cols);
            b = (colnum*255/term_cols);
            if (g>255) g = 510-g;
                printf "\033[48;2;%d;%d;%dm", r,g,b;
                printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
                printf "%s\033[0m", substr(s,colnum%2+1,1);
            }
        printf "\n";
    }'
}

# }}}
# colors {{{

colorgrid ()
{
    local iter=0
    while [ $iter -lt 16 ]
    do
        echo -en "\033[48;5;$(echo $iter)m \033[0m\033[38;5;$(echo $iter)m█ "
        printf "%03d" $iter

        [ $(($iter % 8)) = 7 ] && printf '\r\n' || printf ' '

        local iter=$(($iter+1))
    done

    printf '\r\n'

    local iter=16
    while [ $iter -lt 52 ]
    do
        local second=$(($iter+36))
        local third=$(($second+36))
        local fourth=$(($third+36))
        local fifth=$(($fourth+36))
        local sixth=$(($fifth+36))
        local seventh=$(($sixth+36))

        echo -en "\033[48;5;$(echo $iter)m \033[0m\033[38;5;$(echo $iter)m█ "
        printf "%03d" $iter
        echo -en " \033[48;5;$(echo $second)m \033[0m\033[38;5;$(echo $second)m█ "
        printf "%03d" $second
        echo -en " \033[48;5;$(echo $third)m \033[0m\033[38;5;$(echo $third)m█ "
        printf "%03d" $third
        echo -en " \033[48;5;$(echo $fourth)m \033[0m\033[38;5;$(echo $fourth)m█ "
        printf "%03d" $fourth
        echo -en " \033[48;5;$(echo $fifth)m \033[0m\033[38;5;$(echo $fifth)m█ "
        printf "%03d" $fifth
        echo -en " \033[48;5;$(echo $sixth)m \033[0m\033[38;5;$(echo $sixth)m█ "
        printf "%03d" $sixth
        if [ $seventh -lt 256 ]; then
            echo -en " \033[48;5;$(echo $seventh)m \033[0m\033[38;5;$(echo $seventh)m█ "
            printf "%03d" $seventh
        fi

        local iter=$(($iter+1))
        printf '\r\n'
    done
}

dir_colors ()
{
    typeset -A names
    names[rs]="reset"
    names[no]="global default"
    names[fi]="normal file"
    names[di]="directory"
    names[ln]="symbolic link"
    names[mh]="multi-hardlink"
    names[pi]="named pipe"
    names[so]="socket"
    names[do]="door"
    names[bd]="block device"
    names[cd]="character device"
    names[or]="orphan symlink"
    names[mi]="missing file"
    names[su]="set uid"
    names[sg]="set gid"
    names[st]="sticky directory"
    names[tw]="sticky other writable"
    names[ow]="other writable"
    names[ca]="file with capability"
    names[ex]="executable"

    for i in ${(s.:.)LS_COLORS}
    do
        local key=${i%\=*}
        local color=${i#*\=}
        local name=${names[(e)$key]-$key}
        printf '(\e[%sm%s\e[m) ' $color $name
    done
    echo
}

# }}}
# shell info {{{

userhost ()
{
    local UserColor="$(_color 15)${_color_underline}"
    [ "$(id -u)" -eq 0 ] && UserColor="$(_color 196)${_color_underline}"
    local AtColor="${_color_no_underline}$(_color 244)"
    local HostColor="$(_color 15)${_color_underline}"

    echo "${_color_reset}${UserColor}$USERNAME${AtColor}@${HostColor}$HOST${_color_reset}"
}

process_chain ()
{
    [ -z "$_pstree" ] && return

    local Chain=(${(s/---/)_pstree})
    [ "$1" = "no_zsh" -a "${Chain[${#Chain}]}" = "zsh" ] && local Chain=(${(@)Chain[1,${#Chain}-1]})

    local ArrowColor="${_color_reset}$(_color 244)"
    local Arrow=" → "

    if [ "$_colors" -ge 256 ]
    then
        local ZshColor="$(_color 15 240)"
        local LfColor="$(_color 0 35)"
        local TmuxColor="$(_color 15 31)"
        local SshColor="$(_color 0 226)${_color_blink}"
        local SuColor="$(_color 0 202)"
        local OtherColor="$(_color 250)"
    else
        local ZshColor="$(_color 0 15)"
        local LfColor="$(_color 0 2)"
        local TmuxColor="$(_color 15 6)"
        local SshColor="$(_color 0 3)"
        local SuColor="$(_color 0 1)"
        local OtherColor="$(_color 7)"
    fi

    for proc in $Chain
    do
        case "$proc" in
            zsh) local proc="${ZshColor} $proc " ;;
            lf) local proc="${LfColor} $proc " ;;
            \(tmux\)) local proc="${TmuxColor} $proc " ;;
            \(ssh\)) local proc="${SshColor} $proc " ;;
            sudo|su) local proc="${SuColor} $proc " ;;
            *) local proc="${OtherColor}$proc" ;;
        esac

        [ -n "$ProcessChainStr" ] &&
            local ProcessChainStr="${ProcessChainStr}${ArrowColor}${Arrow}$proc" ||
            local ProcessChainStr="$proc"
    done

    echo "${_color_reset}${ProcessChainStr}${_color_reset}"
}

shell_info ()
{
    local TextColor="$(_color 244)"
    local ValueColor="$(_color 15)"

    local Login=
    [[ -o login ]] && local Login="login "

    local IpAddress="$(timeout 0.5 public-ip.sh)"
    [ -n "$IpAddress" ] && local IpAddress="${TextColor} ($IpAddress)"

    echo "${TextColor}current date/time: ${ValueColor}$(date)${_color_reset}"
    echo "${TextColor}tty: ${ValueColor}$TTY${TextColor}, terminal: ${ValueColor}$TERM${TextColor}, ${ValueColor}${COLUMNS}${TextColor}x${ValueColor}${LINES}${TextColor} cells, ${ValueColor}${_colors}${TextColor} colors${_color_reset}"
    echo "${TextColor}process chain: $(process_chain)${TextColor}"
    echo "${TextColor}running ${Login}${ValueColor}$SHELL${TextColor} shell as $(userhost)${_color_reset}$IpAddress"
}

# }}}
# sudo shell {{{

sudo_shell ()
{
    sudo -s --preserve-env="$SUDO_PRESERVE_ENV" "$@"
}

# }}}
# ssh {{{

ssh_add ()
{
    [ -z "$SSH_AUTH_SOCK" ] && eval $(ssh-agent -s) > /dev/null

    if [ -n "$SSH_AUTH_SOCK" ]
    then
        local _SSH_ADD_PASSPHRASE_COMP="computers/$HOST/os/linux/$USER/ssh/passphrase"
        local _SSH_ADD_PASSPHRASE_VM="vm/$HOST/os/linux/$USER/ssh/passphrase"

        if [ -n "${_SSH_ADD_PASSPHRASE:=$(pass "$_SSH_ADD_PASSPHRASE_COMP" 2> /dev/null)}" -o \
            -n "${_SSH_ADD_PASSPHRASE:=$(pass "$_SSH_ADD_PASSPHRASE_VM" 2> /dev/null)}" ]
                then
                    $HOME/.scripts/df/ssh-add.expect "$USER" "$_SSH_ADD_PASSPHRASE"
                else
                    ssh-add
        fi

        unset _SSH_ADD_PASSPHRASE _SSH_ADD_PASSPHRASE_COMP _SSH_ADD_PASSPHRASE_VM
    fi
}

# }}}
# tmux {{{

tx ()
{
    local DIR="$PWD"
    cd
    if [[ -o interactive ]] && [[ ! "$TERM" =~ "screen" ]] && [[ ! "$TERM" =~ "tmux" ]] && [ -z "$TMUX" ]
    then
        if [ -z "$1" ]
        then tmux attach || tmux new-session -x $COLUMNS -y $(($LINES-1)) -s default
        else tmux attach -t "$1" || tmux new-session -x $COLUMNS -y $(($LINES-1)) -s "$1"
        fi && { echo; separator; shell_info; }
    fi
    cd -- "$DIR"
}

txclip ()
{
    tmux set-buffer "$(cat)"
}

# }}}
# bd {{{

bd ()
{
    local Path="./"
    [ "$#" -eq 0 ] && { cd ..; return; }
    for i in $(seq $1)
    do
        local Path="$Path/.."
    done
    cd "$Path"
}

# }}}
# lf {{{

cdlf ()
{
    [ "$#" -gt 0 ] && cd -- "$@"
    [ -n "$id" ] &&
        lf -remote "send $id cd \"$(echo "$PWD" | sed 's/\"/\\\"/g')\""
}

lfcd ()
{
    [ -n "$LF_LEVEL" ] && echo "$_pstree" | grep -q -- '---lf---zsh$' && exit

    local tmp="$(mktemp)"
    local fid="$(mktemp)"

    lf -command '$printf $id > '"$fid"'' -last-dir-path="$tmp" "$@"

    local id="$(cat "$fid")"
    if [ -f "$tmp" ]; then
        local dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" -a "$dir" != "$PWD" ] && cd -- "$dir" || true
    fi
}

# }}}

# vim: ft=zsh: foldmethod=marker:
