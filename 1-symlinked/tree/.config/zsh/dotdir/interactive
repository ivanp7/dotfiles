# Configuration {{{

# zsh directories
mkdir -p "$XDG_CACHE_HOME/zsh"
mkdir -p "$XDG_DATA_HOME/zsh"

# options
HISTFILE="$XDG_DATA_HOME/zsh/history"
HISTSIZE=100000
SAVEHIST=10000
setopt appendhistory extendedglob nomatch
setopt autocd autopushd pushdignoredups
unsetopt beep notify

setopt COMPLETE_ALIASES
setopt HIST_IGNORE_DUPS HIST_FIND_NO_DUPS

autoload -Uz add-zsh-hook

# help
autoload -Uz run-help
autoload -Uz run-help-git
autoload -Uz run-help-ip
autoload -Uz run-help-sudo
alias help=run-help

# completion
fpath=($fpath "$(realpath -L "$ZDOTDIR/../completion")")

autoload -Uz compinit
zmodload zsh/complist
zstyle ':completion:*' menu select
compinit -d "$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"
_comp_options+=(globdots) # Include hidden files

# auto prehash
zshcache_time="$(date +%s%N)"
rehash_precmd ()
{
  if [[ -a /var/cache/zsh/pacman ]]; then
    local paccache_time="$(date -r /var/cache/zsh/pacman +%s%N)"
    if (( zshcache_time < paccache_time )); then
      rehash
      zshcache_time="$paccache_time"
    fi
  fi
}
add-zsh-hook -Uz precmd rehash_precmd

# syntax highlighting
. /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# dircolors
eval $(dircolors)

# "command not found"
. /usr/share/doc/pkgfile/command-not-found.zsh

# freeze terminal (disable changes of the settings except screen size)
ttyctl -f

# }}}
# Temporary files {{{

# pid file handling
mkdir -p "$TMPDIR_CURRENT/pid/$TTY"
echo "$PARENT_SHELL_PID" > "$TMPDIR_CURRENT/pid/$TTY/$$"

# shell_info file handling
mkdir -p "$TMPDIR_CURRENT/shell_info/$TTY"
touch "$TMPDIR_CURRENT/shell_info/$TTY/$$"

[ -n "$PARENT_SHELL_PID" -a -f "$TMPDIR_CURRENT/shell_info/$TTY/$PARENT_SHELL_PID" ] &&
    rm "$TMPDIR_CURRENT/shell_info/$TTY/$PARENT_SHELL_PID"

uninit_shell ()
{
    [ -f "$TMPDIR_CURRENT/pid/$TTY/$$" ] &&
        rm "$TMPDIR_CURRENT/pid/$TTY/$$"
    [ -f "$TMPDIR_CURRENT/shell_info/$TTY/$$" ] &&
        rm "$TMPDIR_CURRENT/shell_info/$TTY/$$"
    true
}

# }}}
# Keys {{{

bindkey -v

autoload edit-command-line
zle -N edit-command-line

autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"

# setup key accordingly
[ -n "${key[Insert]}"    ] && bindkey -- "${key[Insert]}"    overwrite-mode
[ -n "${key[Backspace]}" ] && bindkey -- "${key[Backspace]}" vi-backward-delete-char
[ -n "${key[Delete]}"    ] && bindkey -- "${key[Delete]}"    vi-delete-char
[ -n "${key[PageUp]}"    ] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[ -n "${key[PageDown]}"  ] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[ -n "${key[ShiftTab]}"  ] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete

bindkey '^[[A' up-line-or-beginning-search
bindkey '^[[B' down-line-or-beginning-search
bindkey '^[[D' vi-backward-char
bindkey '^[[C' vi-forward-char
bindkey '^[[H' vi-beginning-of-line
bindkey '^[[F' vi-end-of-line
bindkey -M vicmd 'k' up-line-or-beginning-search
bindkey -M vicmd 'j' down-line-or-beginning-search

bindkey '\C-b' vi-backward-char
bindkey '\C-f' vi-forward-char
bindkey '\C-a' vi-beginning-of-line
bindkey '\C-e' vi-end-of-line

bindkey '^M' self-insert-unmeta

edit_command_in_vim ()
{
    _p_set_abandoned_prompt
    zle reset-prompt
    edit-command-line
}
zle -N edit_command_in_vim

bindkey '^v' edit_command_in_vim
bindkey -M vicmd '^v' edit_command_in_vim

fzf_cd ()
{
    dir="$({
        if [ "$PWD" != "/" ]
        then
            cur="${PWD%/*}"
            while [ -n "$cur" ]
            do
                echo "$cur"
                cur="${cur%/*}"
            done
            echo "/"
        fi

        find -L . -mindepth 1 -maxdepth 10 -type d -printf '%P\n' 2> /dev/null
    } | fzf +m --header="$PWD")" || return 0

    cd -- "$dir"
    zle push-line
    zle accept-line
}
zle -N fzf_cd

bindkey '^g' fzf_cd

typeset -A _p_buffers

rep ()
{
    [ -z "$BUFFER" ] && return 1
    BUFFER="$_p_buffers[$BUFFER]"
    zle vi-beginning-of-line
}
zle -N rep

bindkey '^r' rep

exit_zsh ()
{
    _p_set_abandoned_prompt
    zle reset-prompt
    uninit_shell
    exit 0
}
zle -N exit_zsh
bindkey '^d' exit_zsh

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
    autoload -Uz add-zle-hook-widget
    function zle_application_mode_start {
        echoti smkx
    }
    function zle_application_mode_stop {
        echoti rmkx
    }
    add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
    add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# }}}
# Prompt {{{

# initialize variables
_p_command_number=1

# shell prompt
. "$ZDOTDIR/prompt"

if [[ ! -o login ]]
then
    echo
    sleep 0.1
    separator
    shell_info
fi

# }}}

# vim: ft=zsh: foldmethod=marker:
