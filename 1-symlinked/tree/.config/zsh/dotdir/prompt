# Auxilliary constants & functions {{{

[ "$(id -u)" -eq 0 ] && _p_root=true

[ -z "$_p_root" ] && _p_prompt_character="$" || _p_prompt_character="#"

[ -n "$_p_interactive_shells" ] &&
    export _p_interactive_shells="${_p_interactive_shells}${_p_prompt_character}" ||
    export _p_interactive_shells="${_p_prompt_character}"

[ -n "$PARENT_SHELL_PID" -a -f "$TMPDIR_CURRENT/pid/$TTY/$PARENT_SHELL_PID" ] &&
    export _p_interactive_shells_this_tty=$(($_p_interactive_shells_this_tty + 1)) ||
    export _p_interactive_shells_this_tty=1

_p_intsh_indicator="${_p_interactive_shells:0:-${_p_interactive_shells_this_tty}}[${_p_interactive_shells: -${_p_interactive_shells_this_tty}}]"

_p_dot="·"
_p_bullet="•"
_p_uparrow="↑"
_p_downarrow="↓"
_p_updownarrow="↕"

# }}}
# Shell info {{{

_p_command_number_f ()
{
    # [ -n "$_p_command_executed" ] && _p_command_number=$(($_p_command_number+1))
    _p_command_number=$(($_p_command_number+1))
}
add-zsh-hook precmd _p_command_number_f

_p_shell_info_f ()
{
    [ -z "$_p_root" ] &&
        local BgColor="$(_color 248 238)" ||
        local BgColor="$(_color 0 202)"

    _p_shell_info_length=$((1 + ${#_p_intsh_indicator} + 1 + ${#_p_command_number} + 1))
    _p_shell_info="${BgColor} ${_p_intsh_indicator}${_p_dot}${_p_command_number} "
}
add-zsh-hook precmd _p_shell_info_f

_p_prev_command_info_f ()
{
    _p_exitcode="$?" # This needs to be first

    if [ -n "$_p_command_executed" ]
    then
        unset _p_command_executed

        if [ -n "$_p_timer" ]
        then
            _p_timer_delta=$(($SECONDS - $_p_timer))
            [ $_p_timer_delta -lt 0 ] && _p_timer_delta=0
            unset _p_timer
        fi
    else
        unset _p_timer_delta
        unset _p_exitcode
    fi

    _p_in_prompt=true
}
add-zsh-hook precmd _p_prev_command_info_f

_p_preexec ()
{
    unset _p_in_prompt
    _p_timer=${_p_timer:-$SECONDS}
    _p_command_executed=true

    _p_prompt_postcommand_preexec
}
add-zsh-hook preexec _p_preexec

# }}}
# Last command duration info {{{

_p_cmdtimeinfo_f ()
{
    if [ -z "$_p_timer_delta" -o "$_p_timer_delta" -eq 0 ]
    then
        _p_cmdtimeinfo_length=0
        _p_cmdtimeinfo=""
        return
    fi

    if [ "$_colors" -ge 256 ]
    then
        local BgColor=$(_color 0 33)
    else
        local BgColor=$(_color 0 6)
    fi

    local UnitColor=$(_color 250)
    local ValueColor=$(_color 15)

    if [ "$_p_timer_delta" -lt 60 ]
    then
        _p_cmdtimeinfo_length=$((4 + ${#_p_timer_delta}))
        _p_cmdtimeinfo="${BgColor} ${UnitColor}~${ValueColor}${_p_timer_delta}${UnitColor}s "
    elif [ "$_p_timer_delta" -lt 3600 ]
    then
        local minutes=$(($_p_timer_delta / 60))
        local seconds=$(($_p_timer_delta % 60))
        _p_cmdtimeinfo_length=$((5 + ${#minutes} + ${#seconds}))
        _p_cmdtimeinfo="${BgColor} ${UnitColor}~${ValueColor}${minutes}${UnitColor}m${ValueColor}${seconds}${UnitColor}s "
    elif [ "$_p_timer_delta" -lt 86400 ]
    then
        local hours=$(($_p_timer_delta / 3600))
        local minutes=$(($_p_timer_delta / 60 % 60))
        _p_cmdtimeinfo_length=$((5 + ${#hours} + ${#minutes}))
        _p_cmdtimeinfo="${BgColor} ${UnitColor}~${ValueColor}${hours}${UnitColor}h${ValueColor}${minutes}${UnitColor}m "
    else
        local days=$(($_p_timer_delta / 86400))
        local hours=$(($_p_timer_delta / 3600 % 24))
        _p_cmdtimeinfo_length=$((5 + ${#days} + ${#hours}))
        _p_cmdtimeinfo="${BgColor} ${UnitColor}~${ValueColor}${days}${UnitColor}d${ValueColor}${hours}${UnitColor}h "
    fi
}
add-zsh-hook precmd _p_cmdtimeinfo_f

# }}}
# Last command exit code info {{{

_p_signal_name ()
{
    case $1 in
        1  ) echo -n "SIGHUP" ;;
        2  ) echo -n "SIGINT" ;;
        3  ) echo -n "SIGQUIT" ;;
        4  ) echo -n "SIGILL" ;;
        5  ) echo -n "SIGTRAP" ;;
        6  ) echo -n "SIGABRT" ;;
        7  ) echo -n "SIGBUS" ;;
        8  ) echo -n "SIGFPE" ;;
        9  ) echo -n "SIGKILL" ;;
        10 ) echo -n "SIGUSR1" ;;
        11 ) echo -n "SIGSEGV" ;;
        12 ) echo -n "SIGUSR2" ;;
        13 ) echo -n "SIGPIPE" ;;
        14 ) echo -n "SIGALRM" ;;
        15 ) echo -n "SIGTERM" ;;
        16 ) echo -n "SIGSTKFLT" ;;
        17 ) echo -n "SIGCHLD" ;;
        18 ) echo -n "SIGCONT" ;;
        19 ) echo -n "SIGSTOP" ;;
        20 ) echo -n "SIGTSTP" ;;
        21 ) echo -n "SIGTTIN" ;;
        22 ) echo -n "SIGTTOU" ;;
        23 ) echo -n "SIGURG" ;;
        24 ) echo -n "SIGXCPU" ;;
        25 ) echo -n "SIGXFSZ" ;;
        26 ) echo -n "SIGVTALRM" ;;
        27 ) echo -n "SIGPROF" ;;
        28 ) echo -n "SIGWINCH" ;;
        29 ) echo -n "SIGIO" ;;
        30 ) echo -n "SIGPWR" ;;
        31 ) echo -n "SIGSYS" ;;
        34 ) echo -n "SIGRTMIN" ;;
        *) echo -n "$1" ;;
    esac
}

_p_cmdstatusinfo_f ()
{
    if [ "$_colors" -ge 256 ]
    then
        local SuccessColor="${_color_reset}$(_color 7 35)"
        local FailureColor="${_color_reset}$(_color 7 124)"
    else
        local SuccessColor="${_color_reset}$(_color 7 2)"
        local FailureColor="${_color_reset}$(_color 7 1)"
    fi
    local Delimiter=":"

    if [ -n "$_p_exitcode" ]
    then
        if [ "$_p_exitcode" -eq 0 ]
        then
            _p_cmdstatusinfo_length=4
            _p_cmdstatusinfo="${SuccessColor} ok "
        else
            if [ "$_p_exitcode" -gt 128 -a "$_p_exitcode" -lt 163 ]
            then
                local description="$(_p_signal_name $(($_p_exitcode - 128)))"
            else
                case "$_p_exitcode" in
                    1) local description="GENERAL" ;;
                    2) local description="MISUSE" ;;
                    126) local description="NOTEXEC" ;;
                    127) local description="NOTFOUND" ;;
                esac
            fi
            [ -n "$description" ] && local description="${Delimiter}$description"

            _p_cmdstatusinfo_length=$((3 + ${#_p_exitcode} + ${#description}))
            _p_cmdstatusinfo="${FailureColor} ${_p_downarrow}${_p_exitcode}${description} "
        fi
    else
        _p_cmdstatusinfo_length=0
        _p_cmdstatusinfo=""
    fi
}
add-zsh-hook precmd _p_cmdstatusinfo_f

# }}}
# Git info {{{

_p_gitinfo_f ()
{
    local BgColor=$(_color 0 238)
    local LocationColor="$(_color 228)"

    # Exit if not inside a Git repository
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1
    then
        _p_gitinfo_length=0
        _p_gitinfo=""
        return
    fi

    # Git branch/tag, or name-rev if on detached head
    local GIT_LOCATION=${$(git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD)#(refs/heads/|tags/)}
    _p_gitinfo_length=$((2 + ${#GIT_LOCATION}))

    # Exit if inside a .git directory
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" = "true" ]
    then
        local DotGitWarningColor=$(_color 1)

        _p_gitinfo_length=$(($_p_gitinfo_length + 5))
        _p_gitinfo="${BgColor} ${LocationColor}$GIT_LOCATION ${DotGitWarningColor}.git "
        return
    fi

    local AheadColor="$(_color 15)"
    local BehindColor="$(_color 166)"

    local MergingColor="$(_color 33)"
    local UntrackedColor="$(_color 160)"
    local ModifiedColor="$(_color 214)"
    local StagedColor="$(_color 34)"

    local AHEAD="${AheadColor}${_p_uparrow}NUM"
    local BEHIND="${BehindColor}${_p_downarrow}NUM"

    local MERGING="${MergingColor}${_p_updownarrow}"
    local UNTRACKED="${UntrackedColor}${_p_bullet}"
    local MODIFIED="${ModifiedColor}${_p_bullet}"
    local STAGED="${StagedColor}${_p_bullet}"

    local -a DIVERGENCES
    local -a FLAGS

    local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_AHEAD" -gt 0 ]
    then
        local _p_gitinfo_div=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1 + ${#NUM_AHEAD}))
        DIVERGENCES+=( "${AHEAD//NUM/$NUM_AHEAD}" )
    fi

    local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
    if [ "$NUM_BEHIND" -gt 0 ]
    then
        local _p_gitinfo_div=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1 + ${#NUM_BEHIND}))
        DIVERGENCES+=( "${BEHIND//NUM/$NUM_BEHIND}" )
    fi

    [ -n "$_p_gitinfo_div" ] && _p_gitinfo_length=$(($_p_gitinfo_length + 1))

    local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
    if [ -n "$GIT_DIR" -a -r "$GIT_DIR/MERGE_HEAD" ]
    then
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$MERGING" )
    fi

    if [ -n "$(git ls-files $(git rev-parse --show-toplevel) --other --exclude-standard 2> /dev/null)" ]
    then
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$UNTRACKED" )
    fi

    if ! git diff --quiet 2> /dev/null
    then
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$MODIFIED" )
    fi

    if ! git diff --cached --quiet 2> /dev/null
    then
        local _p_gitinfo_flag=true
        _p_gitinfo_length=$(($_p_gitinfo_length + 1))
        FLAGS+=( "$STAGED" )
    fi

    [ -n "$_p_gitinfo_flag" ] && _p_gitinfo_length=$(($_p_gitinfo_length + 1))

    local -a GIT_INFO
    GIT_INFO+=( "${LocationColor}$GIT_LOCATION" )
    [ "${#DIVERGENCES[@]}" -ne 0 ] && GIT_INFO+=( "${(j::)DIVERGENCES}" )
    [ "${#FLAGS[@]}" -ne 0 ] && GIT_INFO+=( "${(j::)FLAGS}" )
    _p_gitinfo="${BgColor} ${(j: :)GIT_INFO} "
}
add-zsh-hook precmd _p_gitinfo_f

# }}}
# Present working directory info {{{

_p_pwdinfo_f ()
{
    local BgColor=$(_color 0 240)
    local DirColor=$(_color 15)
    local SlashColor=$(_color 236)
    local SkipCharacter="$(_color 1)~"

    [ "$PWD" = "/" ] && { _p_pwdinfo="${BgColor} ${DirColor}/ "; return; }

    local PromptLength=$(($_p_shell_info_length + $_p_cmdtimeinfo_length + $_p_cmdstatusinfo_length + $_p_gitinfo_length + 2))
    local MaxOutputLength=$(($COLUMNS - $PromptLength))

    local PathLength=${#PWD}
    local PathExcess=$(($PathLength - $MaxOutputLength))

    if [ "$_p_gitinfo_length" -le "$PathExcess" ]
    then
        local MaxOutputLength=$(($MaxOutputLength + $_p_gitinfo_length))
        local PathExcess=$(($PathLength - $MaxOutputLength))
        _p_gitinfo_length=0
        unset _p_gitinfo
    fi

    local PathDirs=(${(s@/@)${PWD:1}}) # split path into components
    local DirCounter=${#PathDirs}

    for dir in $PathDirs
    do
        if [ "$PathExcess" -le 0 -o "${#dir}" -le 2 ]
        then
            local dir="${DirColor}$dir"
        else
            local DirDelta=$((${#dir} - 2))
            if [ "$DirDelta" -le "$PathExcess" ]
            then
                local dir="${DirColor}${dir:0:1}${SkipCharacter}"
                local PathLength=$(($PathLength - $DirDelta))
                local PathExcess=$(($PathLength - $MaxOutputLength))
            else
                local dir="${DirColor}${dir:0:-$(($PathExcess + 1))}${SkipCharacter}"
                local PathLength=$(($PathLength - $PathExcess))
                local PathExcess=0
            fi
        fi

        local PathStr="${PathStr}${SlashColor}$(($DirCounter % 10))$dir"
        local DirCounter=$(($DirCounter - 1))
    done

    _p_pwdinfo="${BgColor} $PathStr "
}
add-zsh-hook precmd _p_pwdinfo_f

# }}}
# Prompt {{{

_p_set_cursor_shape ()
{
    case $1 in
        block) echo -ne '\e[2 q' ;;
        underline) echo -ne '\e[4 q' ;;
        bar) echo -ne '\e[6 q' ;;
    esac
}

_p_set_insert_prompt ()
{
    RPROMPT=""
    _p_set_cursor_shape bar
}

_p_set_vicommand_prompt ()
{
    RPROMPT="%{$(_color 0 15)%}vicmd%{${_color_reset}%}"
    _p_set_cursor_shape block
}

_p_set_abandoned_prompt ()
{
    RPROMPT=""
    _p_set_cursor_shape block
}

_p_prompt_init_f ()
{
    _p_set_insert_prompt
}
add-zsh-hook precmd _p_prompt_init_f

zle-keymap-select ()
{
    [ "$KEYMAP" = "vicmd" ] && _p_set_vicommand_prompt || _p_set_insert_prompt
    zle reset-prompt
}
zle -N zle-keymap-select

zle-line-init ()
{
    (( ${+terminfo[smkx]} )) && echoti smkx

    _p_set_insert_prompt
    zle reset-prompt
}
zle -N zle-line-init

zle-line-finish ()
{
    (( ${+terminfo[rmkx]} )) && echoti rmkx

    _p_set_abandoned_prompt
    zle reset-prompt
}
zle -N zle-line-finish

_p_prompt_postcommand_preexec ()
{
    echo "${_color_reset}"
}

# Fix a bug when you C-c in CMD mode and you'd be prompted with CMD mode indicator, while in fact you would be in INS mode
# Fixed by catching SIGINT (C-c), set vim_mode to INS and then repropagate the SIGINT, so if anything else depends on it, we will not break it
TRAPINT ()
{
    _p_set_abandoned_prompt
    zle && { zle reset-prompt; zle -R; }
    return $(( 128 + $1 ))
}

_p_trap_exit ()
{
    [ -n "$_p_in_prompt" ] && _p_set_abandoned_prompt
    uninit_shell
}
trap '_p_trap_exit' EXIT

_p_prompt ()
{
    echo "${_color_reset}"
    if [ ! -f "$TMPDIR_CURRENT/shell_info/$TTY/$$" ]
    then
        touch "$TMPDIR_CURRENT/shell_info/$TTY/$$"
        separator
        shell_info
        echo
    fi
    echo "${_p_shell_info}${_p_cmdtimeinfo}${_p_cmdstatusinfo}${_p_pwdinfo}${_p_gitinfo}${_color_reset}"

    PROMPT=""
    PROMPT2=""
    RPROMPT=""
    _p_set_insert_prompt
}
add-zsh-hook precmd _p_prompt

# }}}

# vim: ft=zsh: foldmethod=marker:
