# Options {{{

# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set drawbox on
set tabstop 4

set mouse on

map zp set preview!
map z1 :set nopreview; set ratios 1
map z2 set ratios 1:2
map z3 set ratios 1:2:3
map z4 set ratios 1:2:3:5
map z5 set ratios 1:2:3:5:8

set relativenumber

set previewer ~/.scripts/df/lf-previewer.sh

cmd _set_promptfmt %{{
    std_color=244
    [ "$(id -u)" -ne 0 ] && user_color=250 || user_color=196
    host_color=250
    pwd_color=255
    file_color=84
    file_color_bg=232

    userhost_info="\\033[38;5;${user_color}m%u\\033[38;5;${std_color}m@\\033[38;5;${host_color}m%h\\033[38;5;${std_color}m\\033[38;5;${std_color}m"
    path_info="\\033[38;5;${pwd_color}m%w/\\033[38;5;${file_color}m\\033[48;5;${file_color_bg}m%f"
    lf -remote "send $id set promptfmt \" ${userhost_info} -> ${path_info}\""
}}
_set_promptfmt

# }}}
# Unmapped keys {{{

map gh

# }}}
# Uncathegorized actions {{{

# do nothing; interrupt input
map <esc> %true

# put lf into background
map <c-z> $kill -STOP $PPID

# vim-style quit
cmd q quit

# elevate priviledges
map =w $sudo -s --preserve-env=$SUDO_PRESERVE_ENV
map == $sudo --preserve-env=$SUDO_PRESERVE_ENV lf

# }}}
# Fast movement {{{

cmd fzf_select ${{
    file=$(find . -mindepth 1 -maxdepth 1 -printf '%P\n' 2> /dev/null |
            fzf +m --header='Select file/directory') || return 0

    file="$(echo "$file" | sed 's/"/\\"/g')"
    lf -remote "send $id select \"$file\""
}}

cmd fzf_jump ${{
    file=$({
        old_pwd="$PWD"
        cur=".."
        while [ "$PWD" != "/" ]
        do
            echo $cur
            cur="$cur/.."
            cd ..
        done
        cd -- "$old_pwd"

        find . $@ -printf '%P\n' 2> /dev/null
    } | fzf +m --header="Jump from $PWD") || return 0

    if [ -f "$file" ]
    then cmd="select"
    elif [ -d "$file" ]
    then cmd="cd"
    fi

    file="$(echo "$file" | sed 's/"/\\"/g')"
    lf -remote "send $id $cmd \"$file\""
}}
map g/ :fzf_select
map gf :fzf_jump
map gd :fzf_jump -type d

# }}}
# Visual operations {{{

# glob select&unselect
map V push ::glob-select<space>
map U push ::glob-unselect<space>

cmd toggle_up :toggle; up
cmd toggle_down :toggle; down
map <space> toggle
map b toggle_down
map B toggle_up

# }}}
# Clipboard operations {{{

# copy path
map Ypx $echo -n "$f" | xclip -i -selection clipboard
map Ydx $echo -n "$(dirname "$f")" | xclip -i -selection clipboard
map Ynx $echo -n "$(basename "$f")" | xclip -i -selection clipboard
map Ypt $tmux set-buffer -- "$f"
map Ydt $tmux set-buffer -- "$(dirname "$f")"
map Ynt $tmux set-buffer -- "$(basename "$f")"

# }}}
# Quick info ('a' keys) {{{

# process tree
map ap %{{
    NON_INTERACTIVE=true zsh -ic 'process_chain no_zsh'
}}

# display owner & group
map ao %stat -c %U:%G "$f"

# show MIME type
cmd link_mime %{{
    mime_type=$(file --mime-type "$f" -bLE) || mime_type=""
    echo $mime_type
}}
map am %file --mime-type "$f" -b
map aM link_mime

# display git branch
map ag %echo "${$(git symbolic-ref -q HEAD 2> /dev/null || git name-rev --name-only --no-undefined --always HEAD 2> /dev/null)#(refs/heads/|tags/)}"

# calculate used space
map au %du -chD ${(f)fx} | tail -1

# }}}
# Quick action ('t' keys) {{{

# create directory
cmd mkdir %mkdir -p -- "$(echo "$@")"; lf -remote "send $id reload"
map td push ::mkdir<space>

# touch
map tt %touch ${(f)fx}; lf -remote "send $id reload"
# create file
cmd touch %touch "$(echo "$@")"; lf -remote "send $id reload"
map tf push ::touch<space>

# set permissions
cmd setperm %{{
    chmod $1 ${(f)fx}
    lf -remote "send $id reload"
    stat -c %A "$f"
}}

# set permissions (a+-rwxXst)
map t+r setperm +r
map t-r setperm -r
map t+w setperm +w
map t-w setperm -w
map t+x setperm +x
map t-x setperm -x
map t+X setperm +X
map t-X setperm -X
map t+s setperm +s
map t-s setperm -s
map t+t setperm +t
map t-t setperm -t

# set permissions (u+-rwxXst)
map tu+r setperm u+r
map tu-r setperm u-r
map tu+w setperm u+w
map tu-w setperm u-w
map tu+x setperm u+x
map tu-x setperm u-x
map tu+X setperm u+X
map tu-X setperm u-X
map tu+s setperm u+s
map tu-s setperm u-s
map tu+t setperm u+t
map tu-t setperm u-t

# set permissions (g+-rwxXst)
map tg+r setperm g+r
map tg-r setperm g-r
map tg+w setperm g+w
map tg-w setperm g-w
map tg+x setperm g+x
map tg-x setperm g-x
map tg+X setperm g+X
map tg-X setperm g-X
map tg+s setperm g+s
map tg-s setperm g-s
map tg+t setperm g+t
map tg-t setperm g-t

# set permissions (o+-rwxXst)
map to+r setperm o+r
map to-r setperm o-r
map to+w setperm o+w
map to-w setperm o-w
map to+x setperm o+x
map to-x setperm o-x
map to+X setperm o+X
map to-X setperm o-X
map to+s setperm o+s
map to-s setperm o-s
map to+t setperm o+t
map to-t setperm o-t

# unmount mounted archives
cmd unmount %umount ${(f)fx}; lf -remote "send $id reload"
cmd unmount_rmdir %{{
    for dir in ${(f)fx}; do
        umount "$dir" && rmdir -- "$dir"
    done
    lf -remote "send $id reload"
}}
map tm unmount
map tM unmount_rmdir

# }}}
# Previewing & editing {{{

# preview
cmd preview ${{
    set -f
    mime_type=$(file --mime-type "$f" -bLE) || mime_type=""
    case $mime_type in
        "") ;;
        inode/directory)
            tree -ad -L 3 -I ".git" -n "$f" | sed 's/Â / /g' | $PAGER ;;
        image/*|video/*)
            preview.sh "$f"
            read -sk
            ;;
        application/*)
            case $(echo $mime_type | tail -c +13) in
                pdf)
                    pdftotext -layout "$f" - | $PAGER ;;
                postscript)
                    ps2ascii "$f" | $PAGER ;;
                x-tar|x-bzip|x-bzip2|gzip|x-xz|zstd|zip|x-zip-compressed|x-7z-compressed|x-iso9660-image|x-rar|vnd.rar|x-cpio)
                    list-files.sh "$f" | $PAGER ;;
                pgp|pgp-encrypted)
                    gpg -d "$f" | $PAGER ;;
                *) $PAGER "$f"
            esac
            ;;
        *) $PAGER "$f"
    esac
}}
map i preview
map I $$PAGER "$f"
map =I $sudo --preserve-env=$SUDO_PRESERVE_ENV $PAGER "$f"
map -I !cat "$f"
map =-I !sudo cat "$f"

# edit files
map e $$EDITOR ${(f)fx}
map =e $sudo -e ${(f)fx}

# edit symlink path
map E $edit-symlink.sh "$f"

# }}}
# Execution {{{

# execute current file (must be executable)
map x !"$f"
map X &setsid "$f"
map =x !sudo -E "$f"

map tx push !"$f"<space>
map tX push &setsid<space>"$f"<space>

# }}}
# Opening {{{

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    set -f
    mime_type=$(file --mime-type "$f" -bLE) || mime_type=""
    case $mime_type in
        "") ;;
        application/pdf|application/postscript|image/vnd.djvu)
            setsid $PDFVIEWER ${(f)fx} > /dev/null 2>&1 & ;;
        image/*)
            $VIEWER ${(f)fx} ;;
        video/*|audio/*)
            $PLAYER ${(f)fx} ;;
        text/html)
            $BROWSER ${(f)fx} ;;
        application/*)
            case $(echo $mime_type | tail -c +13) in
                x-tar|x-bzip|x-bzip2|gzip|x-xz|zstd|zip|x-zip-compressed|x-7z-compressed|x-iso9660-image|x-rar|vnd.rar|x-cpio)
                    postfix="-archive-mount"
                    first_file=""
                    for file in ${(f)fx}; do
                        [ -z "$first_file" ] && first_file="$file"
                        mntdir="$file$postfix"
                        mountpoint -q "$mntdir" || {
                            mkdir -p -- "$mntdir"
                            archivemount "$file" "$mntdir"
                        }
                    done
                    file="$(echo "$first_file$postfix" | sed 's/"/\\"/g')"
                    lf -remote "send $id cd \"$file\""
                    lf -remote "send $id reload"
                    ;;
                *) $EDITOR ${(f)fx}
            esac
            ;;
        *) $EDITOR ${(f)fx}
    esac
}}

# alternative 'open' operation
cmd alt_open ${{
    set -f
    mime_type=$(file --mime-type "$f" -bLE) || mime_type=""
    case $mime_type in
        "") ;;
        inode/directory)
            ncdu -e2 "$f" ;;
        image/*)
            setsid $VIEWER ${(f)fx} > /dev/null 2>&1 & ;;
        video/*|audio/*)
            setsid $PLAYER ${(f)fx} > /dev/null 2>&1 & ;;
    esac
}}
map L alt_open

# dedicated keys for file opener actions
# map o &mimeopen "$f"
# map O $mimeopen --ask "$f"
cmd opener ${{
    for file in ${(f)fx}; do
        setsid $OPENER "$file" > /dev/null 2>&1 &
    done
}}
map o opener

# }}}
# Renaming {{{

# smart rename
cmd bulk_rename !{{
    original_names_file=$(mktemp)
    changed_names_file=$(mktemp)
    for file in ${(f)fs}
    do
        echo "$file" >> $original_names_file
        echo "$file" >> $changed_names_file
    done
    $EDITOR $changed_names_file

    NAME_FIX="s/'/'\\\\''/g; s/^/'/; s/\$/'/"
    sed -i "$NAME_FIX" $original_names_file
    sed -i "$NAME_FIX" $changed_names_file

    if [ "$(wc -l < $original_names_file)" -ne "$(wc -l < $changed_names_file)" ]
    then
        echo "Error: number of lines is not equal to the number of files."
    else
        commands_file=$(mktemp)
        paste -d" " $original_names_file $changed_names_file > $commands_file
        rm $original_names_file $changed_names_file
        sed -i 's/^/mv -vi -- /' $commands_file
        $EDITOR $commands_file

        for cmd in $(cat $commands_file)
        do $SHELL -c "$cmd; true"
        done
        rm $commands_file
    fi
}}

cmd smart_rename ${{
    [ -z "$fs" ] && lf -remote "send $id rename" || lf -remote "send $id bulk_rename"
    lf -remote "send $id reload"
}}

map r smart_rename
map R $vidir ${(f)fs}; lf -remote "send $id reload"

# }}}
# Copy-pasting & linking {{{

# pasting done right
cmd paste %{{
    mode=""
    files=""
    lf -remote 'load' | while read file
    do
        if [ -z "$mode" ]
        then mode="$file"
        elif [ -n "$file" ]
        then
            files="yes"

            if [ "$mode" = "copy" ]; then
                target_name="$(basename "$file")"
                if [ "$(dirname "$file")" = "$PWD" ]; then
                    if [ ! -d "$file" -o -L "$file" -o ! -e "$target_name.copy" ]; then
                        target_name="$target_name.copy"
                    fi
                fi

                cp --backup=numbered -a -T "$file" "$target_name"
            elif [ "$mode" = "move" ]; then
                if [ "$(dirname "$file")" != "$PWD" ]; then
                    mv --backup=numbered -t . -- "$file"
                fi
            fi
        fi
    done

    if [ -z "$files" ]; then
        lf -remote "send $id echo no files to paste"
        exit 0
    elif [ "$mode" = "move" ]; then
        lf -remote "send load"
        lf -remote "send clear"
        lf -remote "send $id reload"
    fi
}}
map p paste

cmd rsync !{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        rsync -avP ${(f)list} .
        lf -remote "send $id reload"
    fi
}}
map -p rsync

# links
cmd link %{{
    mode=""
    files=""
    lf -remote 'load' | while read file
    do
        if [ -z "$mode" ]
        then mode="$file"
        elif [ -n "$file" ]
        then
            files="yes"

            target_name="$(basename "$file")"
            if [ "$(dirname "$file")" = "$PWD" ]; then
                target_name="$target_name.link"
            fi

            if [ "$mode" = "copy" ]; then
                ln -s "$@" -T "$file" "$target_name"
            elif [ "$mode" = "move" ]; then
                ln "$@" -T "$file" "$target_name"
            fi
        fi
    done

    if [ -z "$files" ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    else
        lf -remote "send $id reload"
    fi
}}
map PP link
map Pp link -r

# }}}
# Deleting & trashing {{{

# delete files & directories
cmd smart_delete ${{
    echo
    echo "$fx"
    echo -n "($(echo "${fx}" | wc -l)) delete? [y/N] "
    read ans
    if [ "$ans" = "y" ]
    then
        lf -remote "send clear"
        rm -rf -- ${(f)fx}
        lf -remote "send $id reload"
    fi
}}
map <backspace><enter> smart_delete
map <backspace2><enter> smart_delete

# move current file or selected files to trash folder
cmd trash ${{
    echo
    echo "$fx"
    echo -n "($(echo "${fx}" | wc -l)) trash? [y/N] "
    read ans
    if [ "$ans" = "y" ]
    then
        lf -remote "send clear"
        trash-put ${(f)fx}
        lf -remote "send $id reload"
    fi
}}
map <backspace><backspace> trash
map <backspace2><backspace2> trash

# }}}
# Compression {{{

# extract the current file or selected files with the right command
cmd extract ${{
    for file in ${(f)fx}; do
        extract.sh "$file"
    done
    lf -remote "send $id reload"
}}

# compress current file or selected files
cmd compress ${{
    compress.sh $1 "$(echo "${@:2}")" ${(f)fx}
    lf -remote "send $id reload"
}}

cmd tar ${{
    compress.sh tar "$(echo "$@")" ${(f)fx}
    lf -remote "send $id reload"
}}

cmd gz ${{
    compress.sh gz "$(echo "$@")" ${(f)fx}
    lf -remote "send $id reload"
}}

cmd xz ${{
    compress.sh xz "$(echo "$@")" ${(f)fx}
    lf -remote "send $id reload"
}}

cmd zstd ${{
    compress.sh zstd "$(echo "$@")" ${(f)fx}
    lf -remote "send $id reload"
}}

cmd zip ${{
    compress.sh zip "$(echo "$@")" ${(f)fx}
    lf -remote "send $id reload"
}}

cmd 7z ${{
    compress.sh 7z "$(echo "$@")" ${(f)fx}
    lf -remote "send $id reload"
}}

# }}}
# Encryption {{{

cmd encrypt ${{
    for file in ${(f)fx}; do
        echo "$file"
        gpg "$@" --symmetric "$file"
    done
    lf -remote "send $id reload"
}}

cmd decrypt ${{
    for file in ${(f)fx}; do
        echo "$file"
        decrypted_file="$(echo "$file" | sed -E 's/\.(gpg|asc)$//')"
        [ "$decrypted_file" != "$file" ] || decrypted_file="$file.decrypted"
        gpg -o "$decrypted_file" -d "$file"
    done
    lf -remote "send $id reload"
}}

# }}}

# vim: foldmethod=marker:
