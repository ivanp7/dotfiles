#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (setf *load-verbose* nil *load-print* nil
        *compile-verbose* nil *compile-print* nil)
  (ros:ensure-asdf)
  #+quicklisp
  (ql:quickload '(:alexandria :split-sequence) :silent t))

(defmacro run (command &rest args)
  `(nth-value 0 (uiop:run-program ,command :ignore-error-status t 
                                  :input :interactive
                                  :output '(:string :stripped t) 
                                  :error-output :interactive . ,args)))

(defmacro in-directory (path &body body)
  (alexandria:with-gensyms (cwd)
    `(let ((,cwd (uiop:getcwd)))
       (uiop:chdir ,path)
       (let ((result (multiple-value-list (progn . ,body))))
         (uiop:chdir ,cwd)
         (values-list result)))))

(defun merge-namestrings (subpath base)
  (let ((base (if (string= base ".") "" base)))
    (namestring (merge-pathnames subpath 
                                 (uiop:ensure-directory-pathname base)))))

(defun list-files (path &rest types)
  (in-directory path
    (let ((result 
            (split-sequence:split-sequence
              #\Linefeed
              (run 
                (let ((type-options 
                        (nbutlast 
                          (mapcan (lambda (k)
                                    (list "-type" 
                                          (string-downcase (symbol-name k))
                                          "-o"))
                                  types)))) 
                  `("find" "." "-mindepth" "1" "-maxdepth" "1" 
                    . ,type-options)))
              :remove-empty-subseqs t)))
      (map-into result (lambda (file) 
                         (merge-namestrings (subseq file 2) path))
                result))))

(defun real-path (path)
  (run `("realpath" ,path)))

(defun traverse-pattern (pattern-dir file-table dir-table link-reader-fn)
  (setf (gethash pattern-dir dir-table) t)
  (let ((subdirs (list-files pattern-dir :d))
        (links (list-files pattern-dir :l)))
    (dolist (link links)
      (alexandria:when-let ((link-value (funcall link-reader-fn link))) 
        (push link (gethash link-value file-table))))
    (dolist (subdir subdirs)
      (traverse-pattern subdir file-table dir-table link-reader-fn))))

(defun read-link (link original-root)
  (let* ((link-value (real-path link))
         (short-link-value 
           (enough-namestring link-value 
                              (namestring (uiop:ensure-directory-pathname 
                                            original-root)))))
    (when (string/= link-value short-link-value)
      short-link-value)))

(defun generate-unique-name ()
  (run `("cat" "/proc/sys/kernel/random/uuid")))

(defun make-test-command (file)
  (list :test file))

(defun make-mkdir-command (dir)
  (list :mkdir dir))

(defun make-remove-command (file)
  (list :rm file))

(defun make-move-command (src dest)
  (list :mv src dest))

(defun make-copy-command (src dest)
  (list :cp src dest))

(defun generate-script (original-root pattern-root)
  (when (string/= original-root pattern-root) 
    (let ((temp-table (make-hash-table :test 'equal))
          (file-table (make-hash-table :test 'equal))
          (dep-file-table (make-hash-table :test 'equal))
          (dir-table (make-hash-table :test 'equal)))
      (in-directory pattern-root
        (traverse-pattern "." file-table dir-table 
                         (alexandria:rcurry #'read-link original-root)))
      (alexandria:maphash-keys
        (lambda (file)
          (let ((linked-parent-directory
                  (loop :for dirpath := (uiop:pathname-directory-pathname file)
                        :then (uiop:pathname-parent-directory-pathname dirpath)
                        :for dirstr := (namestring dirpath)
                        :while (string/= dirstr "")
                        :for dir := (subseq dirstr 0 (1- (length dirstr)))
                        :when (gethash dir file-table) :return dir))) 
            (if linked-parent-directory
              (setf (gethash file dep-file-table) linked-parent-directory)
              (setf (gethash file temp-table) 
                    (concatenate 'string (substitute #\@ #\/ file 
                                                     :test #'char=) "..." 
                                 (generate-unique-name))))))
        file-table)
      (let ((new-directories 
              (sort (delete "." (alexandria:hash-table-keys dir-table)
                            :test #'string= :count 1) #'< :key #'length))
            (deprecated-files 
              (nset-difference
                (nset-difference 
                  (in-directory original-root (list-files "." :d :f :l))
                  (alexandria:hash-table-values temp-table) :test #'string=)
                (alexandria:hash-table-keys temp-table) :test #'string=)))
        (let (test-commands initial-move-commands remove-commands 
              mkdir-commands copy-commands move-commands)
          (maphash (lambda (file temp-place)
                     (push (make-test-command file) test-commands)
                     (push (make-move-command file temp-place) 
                           initial-move-commands))
                   temp-table)
          (setf remove-commands 
                (mapcar #'make-remove-command deprecated-files))
          (setf mkdir-commands 
                (mapcar #'make-mkdir-command new-directories))
          (maphash 
            (lambda (file temp-place)
              (let ((destinations (gethash file file-table))) 
                (setf copy-commands
                      (nconc 
                        (mapcar (alexandria:curry #'make-copy-command
                                                  temp-place)
                                (rest destinations))
                        copy-commands))
                (setf move-commands
                      (nconc (list (make-move-command 
                                     temp-place (first destinations)))
                             move-commands))))
            temp-table)
          (maphash
            (flet ((substitute-parent (full old new)
                     (concatenate 'string new (subseq full (length old))))) 
              (lambda (file parent-directory)
                (let ((destinations (gethash file file-table)))
                  (setf copy-commands
                        (nconc
                          (mapcar (alexandria:curry 
                                    #'make-copy-command
                                    (substitute-parent 
                                      file parent-directory
                                      (gethash parent-directory
                                               temp-table)))
                                  destinations)
                          copy-commands)))))
            dep-file-table)
          (append test-commands initial-move-commands remove-commands 
                  mkdir-commands copy-commands move-commands))))))

(defun print-script (commands)
  (format t "#!/bin/sh~%")
  (labels ((concat (&rest args) (apply #'concatenate 'string args))
           (protect (name)
             (concat "'./" 
                     (reduce 
                       (lambda (s1 s2) (concat s1 "'\\''" s2))
                       (split-sequence:split-sequence #\' name :test #'char=))
                     "'"))) 
    (let ((c 0)) 
      (dolist (command commands)
        (format t "{ c=~A; ~A; } && ~%" (incf c)
                (ecase (first command)
                  (:test (concat "test -e " (protect (second command))))
                  (:mkdir (concat "mkdir -v " (protect (second command))))
                  (:rm (concat "test ! -e " (protect (second command)) 
                               " || rm -rv " (protect (second command))))
                  (:mv (concat "mv -nTv " (protect (second command)) " " 
                               (protect (third command))))
                  (:cp (concat "cp -anTv " (protect (second command)) " " 
                               (protect (third command)))))))))
  (format t "true || { echo \"~A\"; exit 1; }~%"
          "Error occured at c=$c, aborting."))

(defun main (&rest argv)
  (handler-case
      (if (alexandria:sequence-of-length-p argv 2)
        (let ((original-root (real-path (first argv)))
              (pattern-root (real-path (second argv))))
          (print-script (generate-script original-root pattern-root)))
        (error "expecting 2 parameters -- original and pattern directories"))
      (t (msg) (format *error-output* "Error: ~A~%" msg) 1)))

;;; vim: set ft=lisp lisp:
